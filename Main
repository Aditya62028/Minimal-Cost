import java.io.*;
import java.util.*;
class Solution {
    public int minimizeCost(int k, int arr[]) {
        int[] dp = new int[arr.length];
        Arrays.fill(dp, 100000);  
        dp[0] = 0;  
        for (int i = 0; i < arr.length - 1; i++) {
            for (int j = i + 1; j < arr.length && j <= i + k; j++) {
                dp[j] = Math.min(dp[j], dp[i] + Math.abs(arr[i] - arr[j]));
            }
        }
        return dp[arr.length - 1];
    }
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine());  
        while (t-- > 0) {
            int k = Integer.parseInt(br.readLine());  
            String line = br.readLine();  
            String[] tokens = line.split(" ");  
            int[] arr = new int[tokens.length];  
            for (int i = 0; i < tokens.length; i++) {
                arr[i] = Integer.parseInt(tokens[i]);  
            }
            Solution obj = new Solution();  
            int res = obj.minimizeCost(k, arr);  
            System.out.println(res);  
        }
    }
}
